Part : /BASE_PART
{
	NameKey = "Parts/Capacitor"
	IconNameKey = "Parts/CapacitorIcon"
	ID = kwhwwymwn.auto.capacitor
	EditorGroup = "AutoPower"
	DescriptionKey = "Parts/CapacitorDesc"
	Cost = 1000
	Size = [1, 1]
	SelectionPriority = 0
	MaxHealth = 1000
	TypeCategories = [power, automated, storage]
	CrewSpeedFactor = 0
	ReceivableBuffs : ^/0/ReceivableBuffs []
	AllowedDoorLocations = []
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [32, 32]
	}
	Components : ^/0/Components
	{
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}
		BatteryStorage
		{
			Type = AmmoStorage
			AmmoType = battery
			MaxAmmo = 3000
		}
		Proxy
		{
			Type = AmmoStorageProxy
			AmmoType = battery
			PartLocation = [0, 1]
			ComponentID = BatteryStorage
			PartCriteria
			{
				ExcludeCategories = [ftl, shield]
			}
		}
		//store power in the capacitor when the part has enough power, unload the power in the part when it need it
		//reload capacitor when part battery storage over 75% , stop when part battery storage under 33%
		//unload capacitor when part battery storage under 25%, stop when part battery storage over 66%
		ThresholdTrigger25
		{
			Type = ThresholdTrigger
			AmountFrom = Proxy
			MaxAmount = .25
		}
		ThresholdTrigger33
		{
			Type = ThresholdTrigger
			AmountFrom = Proxy
			MaxAmount = 1/3
		}
		ThresholdTrigger66
		{
			Type = ThresholdTrigger
			AmountFrom = Proxy
			MinAmount = 2/3
		}
		ThresholdTrigger75
		{
			Type = ThresholdTrigger
			AmountFrom = Proxy
			MinAmount = .75
		}
		ReloadToggle
		{
			Type = TriggeredToggle
			OnTrigger = ThresholdTrigger75
			OffTrigger = ThresholdTrigger33
			StartsOn = false
		}
		ReloadOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, ReloadToggle]
			Mode = All
		}
		UnloadToggle
		{
			Type = TriggeredToggle
			OnTrigger = ThresholdTrigger25
			OffTrigger = ThresholdTrigger66
			StartsOn = false
		}
		UnloadOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, UnloadToggle]
			Mode = All
		}
		PowerReload 
		{
			Type = AmmoConverter
			OperationalToggle = ReloadOperational
			FromStorage = Proxy
			ToStorage = BatteryStorage
			FromQuantity = 50
			ToQuantity = 50
			Interval = 0.1 //6s to reload
		}
		PowerUnload 
		{
			Type = AmmoConverter
			OperationalToggle = UnloadOperational
			FromStorage = BatteryStorage
			ToStorage = Proxy
			FromQuantity = 50
			ToQuantity = 50
			Interval = 1/30 //2s to unload
		}
		
		Graphics
		{
			Type = Graphics
			Location = [.5, .5]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 1]
					}
					{
						File = "floor_33.png"
						Size = [1, 1]
					}
					{
						File = "floor_66.png"
						Size = [1, 1]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "doodads.png"
						Size = [1, 1]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 1]
					}
					{
						File = "walls_33.png"
						Size = [1, 1]
					}
					{
						File = "walls_66.png"
						Size = [1, 1]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [1, 1]
					}
					{
						File = "roof_33.png"
						Size = [1, 1]
					}
					{
						File = "roof_66.png"
						Size = [1, 1]
					}
				]
			}
		}
		BatterySprites
		{
			Type = AmmoSprites
			Location = [0.5, 0.5]
			AmmoStorage = BatteryStorage
			Layer = "doodads_high"
			AmmoLevels
			[
				{
					File = "battery1.png"
					Size = [1, 1]
				}
				{
					File = "battery2.png"
					Size = [1, 1]
				}
				{
					File = "battery3.png"
					Size = [1, 1]
				}
			]
		}
		//LightsGraphics
		
		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyedDry
			Location = [.5, .5]
		}
		
		Indicators
		{
			Type = IndicatorSprites
			Location = [0.5, 0.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [0.8, 0.8]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [0.8, 0.8]
					}
				}
			]
		}
		
		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 1]
		}
	}

	Stats
	{
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxAmmo) / 1000
		ReloadTime = (&~/Part/Components/BatteryStorage/MaxAmmo)/(&~/Part/Components/PowerReload/ToQuantity)*(&~/Part/Components/PowerReload/Interval)
		UnloadTime = (&~/Part/Components/BatteryStorage/MaxAmmo)/(&~/Part/Components/PowerUnload/FromQuantity)*(&~/Part/Components/PowerUnload/Interval)
	}
}

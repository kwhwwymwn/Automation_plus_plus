Part : /BASE_PART
{
	NameKey = "Parts/FuelAutoLoader"
	IconNameKey = "Parts/FuelAutoLoaderIcon"
	ID = kwhwwymwn.auto.fuel_auto_loader
	EditorGroup = "AutoPower"
	DescriptionKey = "Parts/FuelAutoLoaderDesc"
	Cost = 9000
	Size = [2, 2]
	MaxHealth = 4000
	SelectionPriority = 1
	TypeCategories = [engine_room, automated, autoloader]
	ReceivableBuffs : ^/0/ReceivableBuffs [AutoReactorSupply, FtlActivation, EngineBuff, PowerLoaderEfficiency, AutoLoaderEfficiency]
	CrewSpeedFactor = 0
	AllowedDoorLocations = []
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 64]
	}
	Components : ^/0/Components
	{
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}
		SupplyBuffToggle
		{
			Type = BuffToggle
			BuffType = AutoReactorSupply
		}
		FtlActivation
		{
			Type = BuffToggle
			BuffType = FtlActivation
		}
		IndicatorOperational
		{
			Type = MultiToggle
			Toggles
			[
				{Toggle = PowerToggle}
				{Toggle = FtlActivation, invert = true}
			]
			Mode = All
		}
		IsOperational
		{
			Type = MultiToggle
			Toggles = [IndicatorOperational, SupplyBuffToggle]
			Mode = All
		}
		CombinedBatteryStorage
		{
			Type = MultiAmmoStorage
			AmmoType = battery
			ViaBuffs
			{
				OutgoingBuffProviders = [ThrusterBuffProvider]
				ComponentID = BatteryStorage
			}
			AddMode = PrioritizeLeastAmmo
		}
		SelfBuffProviderReactor
		{
			Type = SelfBuffProvider
			BuffType = AutoLoaderEfficiency
			BuffAmount = {BaseValue = 0 ; BuffType = AutoReactorSupply ; BuffMode = Add}
			OperationalToggle = SupplyBuffToggle //prevent the timer from being stuck on infinity
		}
		SelfBuffProviderNode
		{
			Type = SelfBuffProvider
			BuffType = AutoLoaderEfficiency
			BuffAmount = {BaseValue = 1 ; BuffType = PowerLoaderEfficiency ; BuffMode = Multiply}
		}
		FuelConverter
		{
			Type = AmmoConverter
			OperationalToggle = IsOperational
			ToStorage = CombinedBatteryStorage
			ToQuantity = 500
			Interval = {BaseValue = 1/3 ; BuffType = AutoLoaderEfficiency ; BuffMode = Divide}
		}
		
		BuffProvider1
		{
			Type = GridBuffProvider
			BuffType = AutoReactorSupplyPenalty1
			BuffAmount = 1
			GridDistance = 8
			AllowDiagonals = true
			OperationalToggle = PowerToggle
		}
		BuffProvider2
		{
			Type = GridBuffProvider
			BuffType = AutoReactorSupplyPenalty2
			BuffAmount = 1
			GridDistance = 12
			AllowDiagonals = true
			OperationalToggle = PowerToggle
		}
		BuffProvider3
		{
			Type = GridBuffProvider
			BuffType = AutoReactorSupplyPenalty3
			BuffAmount = 1
			GridDistance = 16
			AllowDiagonals = true
			OperationalToggle = PowerToggle
		}
		ThrusterBuffProvider
		{
			Type = GridBuffProvider
			BuffType = Engine
			BuffAmount = {BaseValue=50%; BuffType=EngineBuff; BuffMode=Add}
			GridDistance = 1
			OperationalToggle = IsOperational
		}
		
		Graphics
		{
			Type = Graphics
			Location = [1, 1]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [2, 2]
					}
					{
						File = "floor_33.png"
						Size = [2, 2]
					}
					{
						File = "floor_66.png"
						Size = [2, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_1.png"
							"doodads_2.png"
							"doodads_3.png"
							"doodads_4.png"
							"doodads_5.png"
							"doodads_6.png"
							"doodads_7.png"
							"doodads_8.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.075
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [2, 2]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "light.png"
						Size = [2, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [2, 2]
					}
					{
						File = "walls_33.png"
						Size = [2, 2]
					}
					{
						File = "walls_66.png"
						Size = [2, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [2, 2]
					}
					{
						File = "roof_33.png"
						Size = [2, 2]
					}
					{
						File = "roof_66.png"
						Size = [2, 2]
					}
				]
			}
			OperationalRoofWindows
			{
				Layer = "roof_windows"
				DamageLevels
				[
					{
						File = "roof_windows.png"
						Size = [2, 2]
					}
					{
						File = "roof_windows_33.png"
						Size = [2, 2]
					}
					{
						File = "roof_windows_66.png"
						Size = [2, 2]
					}
				]
			}
			NonOperationalRoofWindows = &OperationalRoofWindows
		}
		
		EngineHum
		{
			Type = ContinuousEffects
			Location = [1, 1]
			OperationalToggle = IsOperational
			MediaEffects
			[
				: /COMMON_SOUNDS/ThrusterHum
				{
					Volume = .2
					Speed = 1
					MaxConcurrentVolume = 1
				}
			]
		}
		
		OperationEffects
		{
			Type = ToggleEffects
			Location = [1, 1]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}
		
		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1, 1]
		}
		
		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 1]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = IndicatorOperational
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = SupplyBuffToggle
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}
		
		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 2]
		}
	}
	Stats
	{
		ThrusterBuff = (&~/Part/Components/ThrusterBuffProvider/BuffAmount/BaseValue) * 100
	}
	StatsByCategory
	[
		{
			NameKey = "StatCategories/FuelLoader"
			Stats
			{
				SupplyPowerUse = &~/Part/Components/BuffProvider1/BuffAmount
				FuelLoader = (&~/Part/Components/FuelConverter/ToQuantity) * (&Frequency) /1000
				Frequency = 1/(&~/Part/Components/FuelConverter/Interval/BaseValue)
			}
		}
	]
}

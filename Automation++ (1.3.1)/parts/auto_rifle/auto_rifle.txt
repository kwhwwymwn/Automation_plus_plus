Part : /BASE_PART
{
	NameKey = "Parts/AutoRifle"
	IconNameKey = "Parts/AutoRifleIcon"
	ID = jbox1.auto.auto_rifle
	OtherIDs = ["drone_mini_laser"]
	EditorGroup = "WeaponsEnergy"
	DescriptionKey = "Parts/AutoRifleDesc"
	Cost = 2500
	TypeCategories = [weapon, weapon_using_power, automated]
	Size = [1, 3]
	PhysicalRect = [0, 2, 1, 1]
	SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 3000
	InitialPenetrationResistance = 3
	PenetrationRectType = Normal
	ProhibitAbove = 0
	ReceivableBuffs : ^/0/ReceivableBuffs [AutoWeaponRange]
	AllowedDoorLocations
	[
		[0,3]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [21.33, 64]
	}
	Components : ^/0/Components 
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles
			[PowerToggle, BatteryStorage]
			Mode = All
		}
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		BatteryStorage
		{
			Type = AmmoStorage
			AmmoType = battery
			MaxAmmo = 2000
		}
		BatteryConsumer
		{
			Type = AmmoConsumer
			AmmoType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
			ReceiveAmmoMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		
		Graphics
		{
			Type = Graphics
			OperationalToggle = IsOperational,
			Location = [.5, 2.5]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 2]
						Offset = [0, -0.5]
					}
					{
						File = "floor_33.png"
						Size = [1, 2]
						Offset = [0, -0.5]
					}
					{
						File = "floor_66.png"
						Size = [1, 2]
						Offset = [0, -0.5]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads on1.png"
							"doodads on2.png"
							"doodads on3.png"
							"doodads on4.png"
							"doodads on5.png"
							"doodads on6.png"
							"doodads on7.png"
							"doodads on8.png"
							"doodads on9.png"
							"doodads on10.png"
							"doodads on11.png"
							"doodads on12.png"
							"doodads on13.png"
							"doodads on14.png"
							"doodads on15.png"
							"doodads on16.png"
							"doodads on17.png"
							"doodads on18.png"
							"doodads on19.png"
							"doodads on20.png"
							"doodads on21.png"
							"doodads on22.png"
							"doodads on23.png"
							"doodads on24.png"
							"doodads on25.png"
							"doodads on26.png"
							"doodads on27.png"
							"doodads on28.png"
							"doodads on29.png"
							"doodads on30.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.06

					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "doodads off.png"
						Size = [1, 1]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [1, 1]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 1]
					}
					{
						File = "walls_33.png"
						Size = [1, 1]
					}
					{
						File = "walls_66.png"
						Size = [1, 1]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [1, 1]
					}
					{
						File = "roof_33.png"
						Size = [1, 1]
					}
					{
						File = "roof_66.png"
						Size = [1, 1]
					}
				]
			}
		}

		Turret
		{
			Type = TurretWeapon
			Location = [.5, 1.46]
			Rotation = -90d
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = 1.5
			FiringArc = 200d
			RotateSpeed = 90d
			FireThresholdAngle = 1d
			AIFirepowerRating = 1000
			Emitter = BulletEmitter
			FirePermissionToggle = FireModeToggle
			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]
			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64
			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}
		ReloadProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = Turret
		}
		
		BulletEmitter
		{
			Type = BulletEmitter
			ChainedTo = Turret
			FireTrigger = Turret
			GetTargetFrom = Turret
			Location = [1.0, 0]
			OperationalToggle = IsOperational
			Bullet = &<mini_energy_shot.txt>
			AmmoStorage = BatteryStorage
			AmmoUsed = 1000
		}

		FireEffect
		{
			Type = TriggeredEffects
			ChainedTo = Turret
			Trigger = Turret
			Location = [1.1, 0]
			AnchorMediaEffects = true

			MediaEffects
			[
				: <./Data/ships/terran/electro_bolter/particles/electro_bolter_shoot.txt>
				{
					Delay = 0
				}

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "small_laser_fire.wav"
					Volume = .6
					Delay = 0
					SpeedVariation = .40
				}
			]
		}

		TurretCollider
		{
			Type = CircleCollider
			ChainedTo = Turret
			Radius = .45
			Density = 1.5
		}

		TurretGraphics
		{
			Type = Graphics
			OperationalToggle = IsOperational,
			ChainedTo = Turret
			Location = [0.25, 0]
			Rotation = 90d
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"weapon2.png"
							"weapon3.png"
							"weapon4.png"
							"weapon5.png"
							"weapon6.png"
							"weapon7.png"
							"weapon6.png"
							"weapon5.png"
							"weapon4.png"
							"weapon3.png"
						]
						Size = [1, 2]
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "weapon1.png"
						Size = [1, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						// None.
					}
					{
						File = "turret damage_33.png"
						Size = [1, 1]
					}
					{
						File = "turret damage_66.png"
						Size = [1, 1]
					}
				]
			}
		}

		BatterySprites
		{
			Type = AmmoSprites
			Location = [0.5, 2.5]
			AmmoStorage = BatteryStorage
			Layer = "doodads_high"
			AmmoLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 1]
				}
				{
					File = "batteries2.png"
					Size = [1, 1]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational
			Location = [.5, 2.5]
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [.5, 2.5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, 2.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}
		BlueprintSprite0
		{
			Type = BlueprintSprite
			File = "blueprint.png"
			Size = [1, 3]
		}
	}

	Stats
	{
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxAmmo) / 1000

		RecPower = &../StatsByCategory/0/Stats/PowerPerSecond
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/AutoRifle"
			Stats
			{
				DamagePerShot = &~/Part/Components/BulletEmitter/Bullet/Components/Hit/HitOperational/HitEffects/0/Damage
				DamagePerSecond = (&DamagePerShot) * (&ROF)
				Damage = [&../DamagePerShot, &../DamagePerSecond]
				ROF = 1 / (&~/Part/Components/Turret/FireInterval)
				Range = &~/Part/Components/BulletEmitter/Bullet/Range/BaseValue
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
				ShotSpeed = &~/Part/Components/BulletEmitter/Bullet/Speed
				ShotHP = &~/Part/Components/BulletEmitter/Bullet/Components/Targetable/Health
				PowerPerShot = (&~/Part/Components/BulletEmitter/AmmoUsed) / 1000
				PowerPerSecond = (&PowerPerShot) * (&ROF)
				ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
			}
		}
	]
}

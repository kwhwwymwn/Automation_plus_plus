Part : /BASE_PART
{
	NameKey = "Parts/DroneShieldGen"
	IconNameKey = "Parts/DroneShieldGenIcon"
	ID = jbox1.auto.drone_shield_generator
	OtherIDs = [jbox1.drone_shield_generator]
	EditorGroup = "Defenses"
	DescriptionKey = "Parts/DroneShieldGenDesc"
	Cost = 2500
	AIValueFactor = 5
	Size = [1, 2]
	PhysicalRect = [0, 1, 1, 1]
	SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 1000
	SelectionTypeID = "shield"
	TypeCategories = [defense, shield]
	ReceivableBuffs : ^/0/ReceivableBuffs []
	ProhibitAbove = 0
	AllowedDoorLocations
	[
		[0, 2]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [42.66, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}
		
		BatteryStorage
		{
			Type = AmmoStorage
			AmmoType = battery
			MaxAmmo = 3000
			ToggleOnAmmo = 2501
			DrainOnFtlJump = true
		}
		BatteryConsumer
		{
			Type = AmmoConsumer
			AmmoType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Defense_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
			ReceiveAmmoMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		
		ProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = BatteryStorage
			LowColor = [0, 0, 255]
			HighColor = [0, 0, 255]
			FullColor = [0, 0, 255]
			Height = 10
		}

		PowerDrain
		{
			Type = AmmoConverter
			OperationalToggle = IsOperational
			FromStorage = BatteryStorage
			FromQuantity = 50
			MinFromQuantityForConversion = 1
			Interval = 1
		}
		
		ArcShield
		{
			Type = ArcShield
			Radius = 4.5
			Arc = 120d
			OperationalToggle = IsOperational
			PenetrationResistance = [25, 0]
			DrainAmmoFrom = BatteryStorage
			AmmoDrainPerDamage = .4
			Rotation = -90d
			Location = [0.5, 1]
			
			BlueprintArcSprite
			{
				Texture
				{
					File = "shield_energy.png"
					SampleMode = Linear
					MipLevels = max
				}
				Size = [0, 1.5]
				Color = [0, 0, 255, 127]
			}
			BlueprintArcSpriteSegments = 64

			CoverageArcSprite
			{
				Texture
				{
					File = "shield_energy.png"
					SampleMode = Linear
					MipLevels = max
				}
				Size = [0, 1.5]
				Color = [255, 255, 255, 127]
			}
			CoverageArcSpriteSegments = 64

			HitMediaEffects
			[
				{
					Type = ArcShield
					FadeInTime = .1
					FadeOutTime = .5
					Radius = &~/Part/Components/ArcShield/Radius
					Arc = 20d
					ArcSprite
					{
						Texture
						{
							File = "shield_energy.png"
							SampleMode = Linear
							MipLevels = max
						}
						Shader = "shield.shader"
						_waveTex
						{
							File = "shield_energy_wave.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_waveSpeed = -2
						_waveAlpha = .75
						_waveCurveInterval = 1
						_waveCurveMagnitude = .25
						_waveCurveUOffsetPerSecond = 0
						//TargetBlendMode = Add
						_fullPowerColor = [0, 0, 255, 191]
						_lowPowerColor = [255, 0, 0, .191]
						_lowPowerThicknessExponent = .6
						TargetBlendMode = Add
						Size = [0, 3]
					}
					ArcSpriteSegments = 6
					Bucket = Upper3
				}

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "shield_hit.wav"
					Volume = 1
					Speed = 1
					IgnoreIntensity = true
					SpeedVariation = .25
					MaxConcurrent = 10
				}
			]
		}
		
		EmitterCollider
		{
			Type = CircleCollider
			ChainedTo = ArcShield
			Location = [.1, 0]
			Radius = 0.5
			Density = .1
		}

		ArcShieldEffect
		{
			Type = ContinuousEffects
			ChainedTo = ArcShield
			FactorMediaEffectsIntensityWith = BatteryStorage
			Location = [&~/Part/Components/ArcShield/Radius, 0]
			OperationalToggle = IsOperational
			MediaEffects
			[
				{
					Type = ArcShield
					Radius = &~/Part/Components/ArcShield/Radius
					Arc = &~/Part/Components/ArcShield/Arc
					FadeInTime = .25
					FadeOutTime = .25
					FadeFromScale = .8
					ArcSprite
					{
						Texture
						{
							File = "shield_energy.png"
							SampleMode = Linear
							MipLevels = max
						}
						Shader = "shield.shader"
						_waveTex
						{
							File = "shield_energy_wave.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_waveSpeed = 1
						_waveAlpha = 1
						_waveCurveInterval = .5
						_waveCurveMagnitude = .35
						_waveCurveUOffsetPerSecond = .2
						_fullPowerColor = [0, 0, 255, 127]
						_lowPowerColor = [255, 0, 0, 127]
						_lowPowerThicknessExponent = .6
						TargetBlendMode = Add
						Size = [0, 1.5]
					}
					ArcSpriteSegments = 64
					Bucket = Lower1
				}

				: /BASE_SOUNDS/AudioExteriorDetail
				{
					Sound = "shield_loop.wav"
					Volume = .15
					Speed = .5
					MaxConcurrent = 1
					MaxConcurrentVolume = .3
					DynamicVolume : ^/0/DynamicVolume
					{
						MinDistance = .75
						MaxDistance = 1.5
					}
					IgnoreIntensity = true
				}
			]
		}

		EmitterEffect
		{
			Type = ContinuousEffects
			ChainedTo = ArcShield
			FactorMediaEffectsIntensityWith = BatteryStorage
			Location = [0.65, 0]
			OperationalToggle = IsOperational
			MediaEffects
			[
				{
					Type = ArcShield
					Radius = 0.55
					Arc = &~/Part/Components/ArcShield/Arc
					FadeInTime = .25
					FadeOutTime = .25
					ArcSprite
					{
						Texture
						{
							File = "shield_energy.png"
							SampleMode = Linear
							MipLevels = max
						}
						UVRect = [0, 1, 1, -1]
						Shader = "shield.shader"
						_waveTex
						{
							File = "shield_energy_wave.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_waveSpeed = -1
						_waveAlpha = 1
						_waveCurveInterval = .5
						_waveCurveMagnitude = .35
						_waveCurveUOffsetPerSecond = .2
						_fullPowerColor = [0, 0, 255, 127]
						_lowPowerColor = [255, 0, 0, 127]
						_lowPowerThicknessExponent = .6
						TargetBlendMode = Add
						Size = [0, 1.0]
					}
					ArcSpriteSegments = 12
					Bucket = Lower1
				}

				: /BASE_SOUNDS/AudioExteriorDetail
				{
					Sound = "shield_emitter_loop.wav"
					Volume = .2
					Speed = 1
					MaxConcurrent = 1
					MaxConcurrentVolume = .4
					IgnoreIntensity = true
				}
			]
		}

		ShieldOperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational,
			ChainedTo = ArcShieldEffect
			ToggledOnMediaEffects
			[
				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "shield_activate.wav"
					Volume = .5
					Speed = 1
					IgnoreIntensity = true
				}
			]
			ToggledOffMediaEffects
			[
				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "shield_deactivate.wav"
					Volume = .5
					Speed = 1
					IgnoreIntensity = true
				}
			]
		}
		
		GraphicsFloor // Hack: We want different floor sprites depending on the operational state.
		{
			Type = Graphics
			OperationalToggle = IsOperational,
			Location = [0.5, 1.5]
			OperationalDoodad
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor_on.png"
						Size = [1, 1]
					}
					{
						File = "floor_on_33.png"
						Size = [1, 1]
					}
					{
						File = "floor_on_66.png"
						Size = [1, 1]
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor_off.png"
						Size = [1, 1]
					}
					{
						File = "floor_off_33.png"
						Size = [1, 1]
					}
					{
						File = "floor_off_66.png"
						Size = [1, 1]
					}
				]
			}
		}
		
		GraphicsOther
		{
			Type = Graphics
			OperationalToggle = IsOperational,
			Location = [0.5, 1.25]
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [1, 1.5]
						AnimationInterval = 0.075
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [1, 1.5]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				Offset = [0, .25]
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [1, 1]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 1.5]
					}
					{
						File = "walls_33.png"
						Size = [1, 1.5]
					}
					{
						File = "walls_66.png"
						Size = [1, 1.5]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				Offset = [0, .25]
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [1, 1]
					}
					{
						File = "roof_33.png"
						Size = [1, 1]
					}
					{
						File = "roof_66.png"
						Size = [1, 1]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				Offset = [0, .25]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"roof_doodads_on1.png"
							"roof_doodads_on2.png"
							"roof_doodads_on3.png"
							"roof_doodads_on4.png"
							"roof_doodads_on5.png"
							"roof_doodads_on6.png"
							"roof_doodads_on7.png"
							"roof_doodads_on8.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.075
					}
				]
			}
			NonOperationalRoofDoodad
			{
				Layer = "roof_doodads"
				Offset = [0, .25]
				DamageLevels
				[
					{
						File = "roof_doodads_off.png"
						Size = [1, 1]
						AnimationInterval = 0.1
					}
				]
			}
			OperationalRoofWindows
			{
				Layer = "roof_windows"
				Offset = [0, .25]
				DamageLevels
				[
					{
						File = "roof_windows.png"
						Size = [1, 1]
					}
					{
						File = "roof_windows_33.png"
						Size = [1, 1]
					}
					{
						File = "roof_windows_66.png"
						Size = [1, 1]
					}
				]
			}
			NonOperationalRoofWindows = &OperationalRoofWindows
		}
		
		BatterySprites
		{
			Type = AmmoSprites
			Location = [0.5, 1.5]
			AmmoStorage = BatteryStorage
			Layer = "doodads_low"
			AmmoLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 1]
				}
				{
					File = "batteries2.png"
					Size = [1, 1]
				}
				{
					File = "batteries3.png"
					Size = [1, 1]
				}
				{
					File = "batteries4.png"
					Size = [1, 1]
				}
				{
					File = "batteries5.png"
					Size = [1, 1]
				}
				{
					File = "batteries6.png"
					Size = [1, 1]
				}
			]
		}
		
		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational,
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [0.5, 1]
		}
		
		Indicators
		{
			Type = IndicatorSprites
			Location = [0.5, 1.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [0.8, 0.8]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [0.75, 0.75]
					}
				}
			]
		}
		
		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 2]
		}
	}
	Stats
	{
		ShieldHP = (&~/Part/Components/BatteryStorage/MaxAmmo) / (&~/Part/Components/ArcShield/AmmoDrainPerDamage)
		ShieldArc = deg(&~/Part/Components/ArcShield/Arc)
		ShieldDist = (&~/Part/Components/ArcShield/Radius) - (&~/Part/Components/ArcShield/Location/1)
		PowerUsageContinuous = (&~/Part/Components/PowerDrain/FromQuantity) / (&~/Part/Components/PowerDrain/Interval) / 1000
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxAmmo) / 1000

		RecPower = (&PowerUsageContinuous) + 0.5
		RecCrew = (&RecPower) * 4
	}
}

Part : /BASE_PART
{
	NameKey = "Parts/AutoDrone"
	IconNameKey = "Parts/AutoDroneIcon"
	ID = kwhwwymwn.auto.drone_core_autonomous
	EditorGroup = "Drones"
	DescriptionKey = "Parts/AutoDroneDesc"
	Cost = 59500
	AIValueFactor = 10
	Density = 3
	Size = [1, 1]
	SelectionPriority = 0
	//IsBuildable = &<../../secrets/debug_mode.txt>/debug
	SelectionTypeID = "drone_core"
	MaxHealth = 4000
	Flammable = false
	PenetrationResistance = 1
	IsContiguityOrigin = true
	TypeCategories = [command, drone, ftl, provides_power, apex_node, bounty_objective]
	AffectsValidityOfCategories = [apex_node]
	ReceivableBuffs : ^/0/ReceivableBuffs []
	AllowedDoorLocations = []
	CreatePartPerTileWhenDestroyed = ""	
	EditorIcon
	{
		Texture
		{
			File = "Icon.png"
			SampleMode = Linear
		}
		Size = [64, 64]
	}
	Components : ^/0/Components
	{
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}
		interferences
		{
			Type = GridBuffProvider
			BuffType = AutoDisable
			BuffAmount = 1
			GridDistance = &<../../secrets/debug_mode.txt>/MaxGridDistance
			AllowDiagonals = true
		}
		CommandProvider
		{
			Type = CommandProvider
			OperationalToggle = PowerToggle
		}
		Sensor
		{
			Type = Sensor
			SightRadius = 500
		}
		WeaponControllerActivation
		{
			Type = GridBuffProvider
			BuffType = WeaponControlEnable
			BuffAmount = 1
			GridDistance = &<../../secrets/debug_mode.txt>/MaxGridDistance
			AllowDiagonals = true
			OperationalToggle = PowerToggle
		}
		// the crew member makes it so that the game doesn't consider drones to be junk
		CrewSource
		{
			Type = CrewSource
			Crew = 1
		}
		CrewLocation
		{
			Type = CrewLocation
			Location = [0.5, 0.5]
			Rotation = 180d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = 10
			CrewDestinations
			[
				[0.5, 0.5]
			]
			CrewLocations
			[
				CrewLocation
			]
		}
		//Ftl Components
		FtlBatteryStorage // non drainable storage so you can't fill it with auto loaders
		{
			Type = AmmoStorage
			AmmoType = battery
			MaxAmmo = 1000
			InitToMaxAmmo = 0
			IsDrainable = false
		}
		PowerSink // storage that will always be full unless it's hit by emp
		{
			Type = AmmoStorage
			AmmoType = battery
			MaxAmmo = 4000
			StartingAmmo = &MaxAmmo
			ToggleOnAmmo = 4000
			ToggleOffAmmo = 3999
		}
		PowerDrain // fill the sink when it's not full, work even if the battery storage is empty
		{
			Type = AmmoConverter
			OperationalToggle = PowerSink
			InvertOperationalToggle = true
			FromStorage = FtlBatteryStorage
			FromQuantity = 200
			MinFromQuantityForConversion = 0
			ToStorage = PowerSink
			ToQuantity = 200
			Interval = .2 //4s to fill the sink
		}
		BatteryProducer // for ftl
		{
			Type = AmmoConverter
			OperationalToggle = FtlDrive
			ToStorage = FtlBatteryStorage
			ToQuantity = 66
			Interval = .2 //3s to jump
		}
		ReloadProgressBar
		{
			Type = ProgressBar
			OperationalToggle = FtlDrive
			ShowProgressFor = FtlBatteryStorage
		}
		FtlDrive
		{
			Type = FtlDrive
			OperationalToggle = PowerToggle
			AmmoStorage = FtlBatteryStorage
			SpinDownDuration = 5
			JumpEfficiencyDistanceRange = [10, 30]
		}
		FtlActivationBuff
		{
			Type = GridBuffProvider
			BuffType = FtlActivation
			BuffAmount = -1
			GridDistance = &<../../secrets/debug_mode.txt>/MaxGridDistance
			AllowDiagonals = true
			OperationalToggle = FtlDrive
		}
		FtlThresholdToggle
		{
			Type = ThresholdToggle
			AmountFrom = FtlBatteryStorage
            MinAmount = 1
		}
		FtlJumpActivationBuff
		{
			Type = GridBuffProvider
			BuffType = FtlJumpActivation
			BuffAmount = -1
			GridDistance = &<../../secrets/debug_mode.txt>/MaxGridDistance
			AllowDiagonals = true
			OperationalToggle = FtlThresholdToggle
		}
		//Power Supply
		SupplyBuffProvider
		{
			Type = GridBuffProvider
			BuffType = AutoReactorSupply
			BuffAmount = 1 // no penalty, aka unlimited power
			GridDistance = 8
			AllowDiagonals = true
			OperationalToggle = PowerToggle
			ShowBuffRange = true
		}
		AutoLoaderEfficiency
		{
			Type = GridBuffProvider
			BuffType = AutoLoaderEfficiency
			BuffAmount = 1 // no bonus, only for displaying the buff amount in blueprint
			GridDistance = 8
			AllowDiagonals = true
			OperationalToggle = PowerToggle
		}
		PowerLoaderBuffProvider
		{
			Type = GridBuffProvider
			BuffType = PowerLoaderEfficiency
			BuffAmount = 20%
			GridDistance = &<../../secrets/debug_mode.txt>/MaxGridDistance
			AllowDiagonals = true
			OperationalToggle = PowerToggle
		}
		AmmoLoaderBuffProvider
		{
			Type = GridBuffProvider
			BuffType = AmmoLoaderEfficiency
			BuffAmount = 20%
			GridDistance = &<../../secrets/debug_mode.txt>/MaxGridDistance
			AllowDiagonals = true
			OperationalToggle = PowerToggle
		}
		//autoweapon range buff
		AutoWeaponBuffProvider
		{
			Type = GridBuffProvider
			BuffType = AutoWeaponRange
			BuffAmount = 50%
			GridDistance = &<../../secrets/debug_mode.txt>/MaxGridDistance
			AllowDiagonals = true
			OperationalToggle = PowerToggle
		}
		//autogun accuracy buff
		AutoGunBuffProvider
		{
			Type = GridBuffProvider
			BuffType = AutoGunAccuracy
			BuffAmount = 20%
			GridDistance = &<../../secrets/debug_mode.txt>/MaxGridDistance
			AllowDiagonals = true
			OperationalToggle = PowerToggle
		}

		Graphics
		{
			Type = Graphics
			OperationalToggle = PowerToggle
			Location = [0.5, 0.5]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 1]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 1]
					}
					{
						File = "walls_33.png"
						Size = [1, 1]
					}
					{
						File = "walls_66.png"
						Size = [1, 1]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "Doodads_on1.png"
						Size = [1, 1]
					}
				]
			}
			NonOperationalDoodad = &OperationalDoodad
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [1, 1]
					}
					{
						File = "roof_33.png"
						Size = [1, 1]
					}
					{
						File = "roof_66.png"
						Size = [1, 1]
					}
				]
			}
		}
		
		OperationEffects
		{
			Type = ToggleEffects
			Location = [1, 1]
			Toggle = PowerToggle
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			Location = [1, 1]

			MediaEffects
			[
				&<./Data/ships/terran/reactor_small/particles/reactor_explode_small.txt>
				&<./Data/ships/terran/reactor_small/particles/reactor_explode_flash_small.txt>
				&<./Data/ships/terran/reactor_small/particles/reactor_shockwave_small.txt>
				&<./Data/common_effects/particles/explosions/med_part_explode_debris.txt>
				&<./Data/common_effects/particles/explosions/big_part_explode_smoke.txt>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "destroyed.wav"
					Volume = 1
					SpeedVariation = .25
				}

				: /BASE_SHAKE
				{
					ShakeAmount = .25
					Duration = 2
				}
			]
			
			HitEffects
			[
				{
					Type = ExplosiveDamage
					TotalDamage = 40000
					Radius = 8
					Delay = .05
					ExpandDuration = .1
					ExpandStartRadius = 2
					ExpandLoss = 100%
					FireChancePerNDamage = 50%
					ImpulsePerNDamage = 10
					NDamage = 1000
					Filter
					{
						OperationalHealth = true
						StructuralHealth = false
						Friendlies = true
					}
				}
				{
					Type = ExplosiveDamage
					TotalDamage = 10000
					Radius = 6
					Delay = .05
					ExpandDuration = .05
					ExpandStartRadius = 2
					ExpandLoss = 100%
					ImpulsePerNDamage = 5
					NDamage = 1000
					Filter
					{
						OperationalHealth = false
						StructuralHealth = true
						Friendlies = true
					}
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [0.5, 0.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}
			]
		}
		BlueprintSprite0
		{
			File = "Blueprints.png"
			Size = [1, 1]
			Type = BlueprintSprite
		}
	}

	Stats
	{
		//PowerGeneration = Infinity
		SensorRange = &~/Part/Components/Sensor/SightRadius
		WifiAutonomy = Infinity
		AutoWeaponRangeBuff = (&~/Part/Components/AutoWeaponBuffProvider/BuffAmount) *100
		AutoGunAccuracyBuff = 100 - (&~/Part/Components/AutoGunBuffProvider/BuffAmount) *100
		PowerLoaderBuff = (&~/Part/Components/PowerLoaderBuffProvider/BuffAmount) *100
		AmmoLoaderBuff = (&~/Part/Components/AmmoLoaderBuffProvider/BuffAmount) *100
	}
	StatsByCategory
	[
		{
			NameKey = "StatCategories/AutoReactorSupply"
			Stats
			{
				SupplyRange = &~/Part/Components/SupplyBuffProvider/GridDistance
				SupplyPower = Infinity
			}
		}
		{
			NameKey = "StatCategories/Ftl"
			Stats
			{
				FtlMaxEfficiencyRange = &~/Part/Components/FtlDrive/JumpEfficiencyDistanceRange/0
				FtlMinEfficiencyRange = &~/Part/Components/FtlDrive/JumpEfficiencyDistanceRange/1
				FtlLoadingTime = ((&~/Part/Components/FtlBatteryStorage/MaxAmmo) / (&~/Part/Components/BatteryProducer/ToQuantity)) * (&~/Part/Components/BatteryProducer/Interval)
			}
		}
	]
}
Part : /BASE_PART
{
	NameKey = "Parts/DroneController"
	IconNameKey = "Parts/DroneControllerIcon"
	ID = jbox1.auto.drone_controller
	EditorGroup = "Drones"
	DescriptionKey = "Parts/DroneControllerDesc"
	Cost = 20000
	AIValueFactor = 5
	Size = [3, 4]
	SelectionPriority = 1
	MaxHealth = 4000
	ReceivableBuffs : ^/0/ReceivableBuffs [DroneControllerRange]
	AllowedDoorLocations
	[
		[-1, 1]
		[3, 1]
		[1, 4]
	]
	BlockedTravelCells
	[
		[0, 0]
		[1, 0]
		[2, 0]
		[0, 2]
		[0, 3]
		[2, 2]
		[2, 3]
	]
	ForceManhattenPathInPart = true
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [48, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [BatteryStorage, PartCrew, PowerToggle]
			Mode = All
		}
		
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}
		
		RepeatingTrigger
		{
			Type = Timer
			OperationalToggle = IsOperational
			Duration = 10
			AutoStart = true
			Repeats = true
		}
		ProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = RepeatingTrigger
			Invert = true
		}
		
		WifiProvider
		{
			Type = TriggeredEffects
			Location = [1.5, 2]
			Trigger = RepeatingTrigger
			HitEffects
			[
				{
					Type = AreaAmmoDrain
					AmmoType = wifi
					AmountPerPart = -10000
					Radius = { BaseValue=500; BuffType=DroneControllerRange; BuffMode=Multiply }
					Falloff = 0
					Delay = 0
					Filter
					{
						Ships = true
						Friendlies = true
						IgnoreInvulnerability = true
						Enemies = false
					}
				}
			]
		}
		
		BatteryStorage
		{
			Type = AmmoStorage
			AmmoType = battery
			MaxAmmo = 4000
			StartingAmmo = &MaxAmmo
		}
		BatteryConsumer
		{
			Type = AmmoConsumer
			AmmoType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/ControlRoom_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
			ReceiveAmmoMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		
		PowerDrain
		{
			Type = AmmoConverter
			OperationalToggle = IsOperational
			FromStorage = BatteryStorage
			FromQuantity = 1000
			Interval = 30// Drains 1 power every half minute.
		}

		CrewLocation0 = {Type = CrewLocation; Location = [1.5, 0.89]; Rotation = 180d}
		CrewLocation1 = {Type = CrewLocation; Location = [0.89, 3]; Rotation = 90d}
		CrewLocation2 = {Type = CrewLocation; Location = [2.11, 3]; Rotation = 270d}
		
		PartCrew
		{
			Type = PartCrew
			Crew = 3
			DefaultPriority = &/PRIORITIES/ControlRoom_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				[1.5, 1.001]
				[1.001, 3]
				[1.999, 3]
			]
			CrewLocations
			[
				CrewLocation0
				CrewLocation1
				CrewLocation2
			]
		}

		Graphics
		{
			Type = Graphics
			OperationalToggle = IsOperational,
			Location = [1.5, 2]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [3, 4]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads on1.png"
							"doodads on2.png"
							"doodads on3.png"
						]
						Size = [2.85, 3.8]
						AnimationInterval = 0.2
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "doodads off.png"
						Size = [2.85, 3.8]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [3, 4]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [3, 4]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [3, 4]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						File = "roof doodads.png"
						Size = [3, 4]
					}
				]
			}
			NonOperationalRoofDoodad = &OperationalRoofDoodad
			OperationalRoofWindows
			{
				Layer = "roof_windows"
				DamageLevels
				[
					{
						File = "roof_windows_on.png"
						Size = [3, 4]
					}
				]
			}
			NonOperationalRoofWindows
			{
				Layer = "roof_windows"
				DamageLevels
				[
					{
						File = "roof_windows_off.png"
						Size = [3, 4]
					}
				]
			}
		}

		BatterySprites
		{
			Type = AmmoSprites
			Location = [1.5, 2]
			AmmoStorage = BatteryStorage
			Layer = "doodads_high"
			AmmoLevels
			[
				{
					File = "batteries 1.png"
					Size = [2.85, 3.8]
				}
				{
					File = "batteries 2.png"
					Size = [2.85, 3.8]
				}
				{
					File = "batteries 3.png"
					Size = [2.85, 3.8]
				}
				{
					File = "batteries 4.png"
					Size = [2.85, 3.8]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational,
			Location = [1.5, 2]
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/BigPartDestroyed
			Location = [1.5, 2]
		}

		OperationSoundLoop
		{
			Type = ContinuousEffects
			Location = [1.5, 2]
			OperationalToggle = IsOperational
			MediaEffects
			[
				: /BASE_SOUNDS/AudioInterior
				{
					Sound = "cockpit_operating.wav"
					Volume = .15
					MaxConcurrentVolume = .3
					Speed = .75
					MaxConcurrent = 1
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1.5, 2]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [2, 2]
					}
				}
				
				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [3, 3]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [3, 3]
					}
				}
			]
		}
		BlueprintSprite0
		{
			File = "blueprints.png"
			Size = [3, 4]
			Type=BlueprintSprite
		}
	}
	
	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerUsageContinuous = (&~/Part/Components/PowerDrain/FromQuantity) / (&~/Part/Components/PowerDrain/Interval) / 1000
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxAmmo) / 1000

		RecPower = &PowerUsageContinuous
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}
	StatsByCategory
	[
		{
			NameKey = "StatCategories/Wifi"
			Stats
			{
				RangeLimited = [(&~/Part/Components/WifiProvider/HitEffects/0/Radius/BaseValue), (&~/Part/Components/WifiProvider/HitEffects/0/Radius/BaseValue)*4.5]
				Frequency = 1/(&~/Part/Components/RepeatingTrigger/Duration)
			}
		}
	]
}
